openapi: 3.0.0

info:
  title: Admin
  description: |
    **In each response you will get json like this: {"success": false, "message?":"error text", }**

  version: 0.0.0

servers:
  - url: http://localhost:8000/api
    description: Dev local serverk

paths:
  /admins/me:
    get:
      summary:
        "to get info by JWT"
      security:
        - bearerAuth: []
      responses:
        "200":
          description:
            "info about admin"
          content:
            application/json:
              schema:
                type:
                  object
                properties:
                  success:
                    type: boolean
                  data:
                    type: object
                    properties:
                      firstName:
                        type: string
                      lastName:
                        type: string
                      username:
                        type: string
                      isSuperAdmin:
                        type: boolean
  /admins:
    get:
      summary:
        "to get list of admins if you superadmin"
      security:
        - bearerAuth: []
      responses:
        "200":
          description:
            "list of admins"
          content:
            application/json:
              schema:
                type:
                  object
                properties:
                  success:
                    type: boolean
                  data:
                    type: array
                    items:
                      type: object
                      properties:
                        id: 
                          type: integer
                        firstName:
                          type: string
                        lastName:
                          type: string
                        username:
                          type: string
                        isSuperAdmin:
                          type: boolean
  /admins/register:
    post: 
      summary:
        "to create an admin you need to be superAdmin"
      security:
        - bearerAuth: []
      requestBody: 
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - firstName
                - lastName
                - username
                - password
              properties: 
                firstName:
                  type: string
                  minLength: 3
                  maxLength: 64
                lastName:
                  type: string
                  minLength: 3
                  maxLength: 64
                username:
                  type: string
                  minLength: 3
                  maxLength: 64
                password:
                  type: string
                  minLength: 3
                  maxLength: 64
      responses: 
        "201":
          description: "new admin created"
          content:
            application/json:
              example:
                {
                  "success": true,
                  "data": {
                    "id": 3,
                    "firstName": "string",
                    "lastName": "string",
                    "username": "string",
                    "isSuperAdmin": false
                  }
                }
  /admins/login:
    post:
      requestBody: 
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - username
                - password
              properties: 
                username:
                  type: string
                  minLength: 3
                  maxLength: 64
                password:
                  type: string
                  minLength: 3
                  maxLength: 64
      responses: 
        "200":
          description: "JWT"
          content:
            application/json:
              schema:
                type: object
                properties:
                  token: 
                    type: string
  /admins/{adminId}:
    get:
      summary:
        "to get info by adminId if you are superadmin"
      parameters:
        - in: path
          name: adminId
          required: true
          schema:
            type: integer
      security:
        - bearerAuth: []
      responses:
        "200":
          description:
            "info about admin"
          content:
            application/json:
              schema:
                type:
                  object
                properties:
                  success:
                    type: boolean
                  data:
                    type: object
                    properties:
                      firstName:
                        type: string
                      lastName:
                        type: string
                      username:
                        type: string
                      isSuperAdmin:
                        type: boolean
    delete:
      summary:
        "to delete admin if you are superadmin"
      parameters:
        - in: path
          name: adminId
          required: true
          schema:
            type: integer
      security:
        - bearerAuth: []
      responses:
        "200":
          description:
            "admin was deleted"

    patch:
      summary:
        "to update an admin you need to be superAdmin"
      parameters:
        - in: path
          name: adminId
          required: true
          schema:
            type: integer
      security:
        - bearerAuth: []
      requestBody: 
        required: true
        content:
          application/json:
            schema:
              type: object
              properties: 
                firstName:
                  type: string
                  minLength: 3
                  maxLength: 64
                lastName:
                  type: string
                  minLength: 3
                  maxLength: 64
                username:
                  type: string
                  minLength: 3
                  maxLength: 64
                password:
                  type: string
                  minLength: 3
                  maxLength: 64
      responses: 
        "200":
          description: "admin updated"
          content:
            application/json:
              example:
                {
                  "success": true,
                  "data": {
                    "id": 2,
                    "firstName": "lol",
                    "lastName": "kek",
                    "username": "cheburek",
                    "isSuperAdmin": false
                  }
                }
  /admins/me/locations:
    get:
      summary:
        "get list of my locations"
      security:
        - bearerAuth: []
      responses:
        "200":
          description:
            "list of locaiton"
          content:
            application/json:
              example:
                {
                  "success": true,
                  "data": [
                    {
                      "id": 1,
                      "address": "string",
                      "city": "string",
                      "postcode": "string",
                      "phone": "string",
                      "mail": "string",
                      "createdAt": "2025-04-16T08:14:07.202Z",
                      "updatedAt": "2025-04-16T08:14:07.202Z",
                      "AdminsLocations": {
                        "AdminId": 1,
                        "LocationId": 1
                      }
                    }
                  ]
                }
  /admins/{adminId}/locations:
    get:
      summary:
        "to get list of locations you need to be superadminadmin"
      parameters:
        - in: path
          name: adminId
          required: true
          schema:
            type: integer
      security:
        - bearerAuth: []
      responses:
        "200":
          description:
            "list of locations"
          content:
            application/json:
              example:
                {
                  "success": true,
                  "data": [
                    {
                      "id": 1,
                      "address": "egalstrase",
                      "city": "wien",
                      "postcode": "1000",
                      "phone": "+99999999",
                      "mail": "wien@gmail.com",
                      "createdAt": "2025-04-13T17:44:13.833Z",
                      "updatedAt": "2025-04-13T17:44:13.833Z",
                      "AdminsLocations": {
                        "AdminId": 1,
                        "LocationId": 1
                      }
                    }
                  ]
                }
  /admins/{adminId}/locations/{locationId}:
    post:
      summary:
          "to connect admin with location you need to be superAdmin"
      parameters:
        - in: path
          name: adminId          
          required: true
          schema:
            type: integer
        - in: path
          name: locationId          
          required: true
          schema:
            type: integer
      security:
        - bearerAuth: []
      responses:
        "200":
          description:
            "connection was successful"
    delete:
      summary:
          "to delete connection between admin with location you need to be superAdmin"
      parameters:
        - in: path
          name: adminId          
          required: true
          schema:
            type: integer
        - in: path
          name: locationId          
          required: true
          schema:
            type: integer
      security:
        - bearerAuth: []
      responses:
        "200":
          description: 
            "association was deleted"
  /locations:
    post:
      summary:
        "to create location you need to be superadmin" 
      security:
        - bearerAuth: []       
      requestBody:
        content:
          application/json:
            schema:
              type: object
              required:
                - address
                - city
                - postcode
                - phone
                - mail
              properties:
                address:
                  type: string
                city:
                  type: string
                postcode:
                  type: string
                phone:
                  type: string
                mail:
                  type:
                    string
      responses:
        "201":
          description:
            "location was created" 
          content:
            application/json:
              example:
                {
                  "success": true,
                  "data": {
                    "id": 3,
                    "address": "string",
                    "city": "string",
                    "postcode": "string",
                    "phone": "string",
                    "mail": "string",
                    "updatedAt": "2025-04-16T10:22:14.845Z",
                    "createdAt": "2025-04-16T10:22:14.845Z"
                  }
                }
    get:
      summary:
        "list of locations"
      responses:
        "200":
          description:
            "list of locations"
          content:
            application/json:
              schema:
                type:
                  object
                properties:
                  success:
                    type: boolean
                  data:
                    type: array
                    items:
                      type: object
                      properties:
                        id:
                          type: integer
                        address:
                          type: string
                        city:
                          type: string
                        postcode:
                          type: string
                        phone:
                          type: string
                        mail:
                          type: string
                        createdAd:
                          type: string  
  /locations/{locationId}:
    get:
      summary:
        "info by locationId"
      parameters:
        - in: path
          name: locationId
          required: true
          schema:
            type: integer
      security:
        - bearerAuth: []
      responses:
        "200":
          description:
            "info about location"
          content:
            application/json:
              schema:
                type:
                  object
                properties:
                  success:
                    type: boolean
                  data:
                    type: object
                    properties:
                        id:
                          type: integer
                        address:
                          type: string
                        city:
                          type: string
                        postcode:
                          type: string
                        phone:
                          type: string
                        mail:
                          type: string
                        createdAd:
                          type: string
    patch:
      summary:
        "to update location you need to be superadmin"
      parameters:
        - in: path
          name: locationId
          required: true
          schema:
            type: integer
      security:
        - bearerAuth: []
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                address:
                  type: string
                city:
                  type: string
                postcode:
                  type: string
                phone:
                  type: string
                mail:
                  type: string
      responses: 
        "200": 
          description: "location was updated"
          content:
            application/json:
              example:
                {
                  "success": true,
                  "data": {
                    "id": 2,
                    "address": "lol",
                    "city": "lol",
                    "postcode": "lol",
                    "phone": "lol",
                    "mail": "lol",
                    "createdAt": "2025-04-16T10:21:36.321Z",
                    "updatedAt": "2025-04-16T10:28:13.311Z"
                  }
                }
    delete:
      summary:
        "to delete location you need to be superadmin"
      parameters:
        - in: path
          name: locationId
          required: true
          schema:
            type: integer
      security:
        - bearerAuth: []
      responses:
        "200":
          description:
            "location was deleted"
  /locations/{locationId}/games:
    post:
      summary:
        "create game on location if you are admin"
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: locationId
          required: true
          schema:
            type: integer
      requestBody:
        content:
          multipart/form-data:
            schema:
              type: object
              required:
                - data
                - file
              properties:
                file:
                  type: string
                  format: binary
                data:
                  type: object
                  required:
                    - name
                    - icon
                    - color
                    - maxPlayers
                  properties:
                    name:
                      type: string
                    color: 
                      type: string
                    maxPlayers:
                      type: integer
      responses:
        "200":
          description: "game was created"
          content:
            application/json:
              example:
                {
                  "success": true,
                  "data": {
                    "id": 2,
                    "name": "string",
                    "color": "string",
                    "maxPlayers": 0,
                    "icon": "1744799370427-383776702.png",
                    "LocationId": 2
                  }
                }
    get:
      summary:
        "get all games on location"
      parameters:
        - in: path
          name: locationId
          required: true
          schema:
            type: integer
      responses:
        "200":
          description:
            "list of games"
          content:
            application/json:
              example:
                {
                  "success": true,
                  "data": [
                    {
                      "id": 1,
                      "name": "string",
                      "icon": "1744748725285-837733886.gif",
                      "color": "string",
                      "maxPlayers": 0,
                      "LocationId": 1
                    }
                  ]
                }
  /locations/{locationId}/games/{gameId}:
    get:
      summary:
        "get game on location"
      parameters:
        - in: path
          name: locationId
          required: true
          schema:
            type: integer
        - in: path
          name: gameId
          required: true
          schema:
            type: integer
      responses:
        "200":
          description:
            "game info"
          content:
            application/json:
              example:
                {
                  "success": true,
                  "data": {
                    "id": 1,
                    "name": "string",
                    "icon": "1744748725285-837733886.gif",
                    "color": "string",
                    "maxPlayers": 0,
                    "LocationId": 1
                  }
                }
    delete:
      summary:
        "delete game on location"
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: locationId
          required: true
          schema:
            type: integer
        - in: path
          name: gameId
          required: true
          schema:
            type: integer
      responses:
        "200":
          description:
            "game was deleted"
          content:
            application/json:
              example:
                {
                  "success": true,
                }
    patch:
      summary:
        "update game on location"
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: locationId
          required: true
          schema:
            type: integer
        - in: path
          name: gameId
          required: true
          schema:
            type: integer
      requestBody:
        content:
          multipart/form-data:
            schema:
              type: object
              required: 
                - file
                - data
              properties:
                file:
                  type: string
                  format: binary
                data:
                  type: object
                  properties:
                    name:
                      type: string
                    color: 
                      type: string
                    maxPlayers:
                      type: integer
      responses:
        "200":
          description: 
            "game was updated"
          content:
            application/json:
              example:
                {
                  "success": true,
                  "data": {
                    "id": 2,
                    "name": "no name",
                    "icon": "1744789749739-759170685.gif",
                    "color": "no color",
                    "maxPlayers": 0,
                    "LocationId": 1
                  }
                }
  /locations/{locationId}/rooms:
    get:
      summary: "to get list of rooms you need to be admin"
      security:
        - bearerAuth: []
      parameters:
        - in: path
          required: true
          name: locationId
          schema: 
            type: integer
        - in: query
          name: offset
          schema: 
            type: integer
        - in: query
          name: limit
          schema: 
            type: integer
        - in: query
          name: isActivate
          schema: 
            type: boolean
        - in: query
          name: adminId
          schema: 
            type: integer
      responses:
        "200":
          description: "list of rooms"
          content:
            application/json:
              example:
                {
                  "success": true,
                  "data": [
                    {
                      "id": 9,
                      "gameTime": 0,
                      "isActivate": true,
                      "code": 9706,
                      "createdAt": "2025-04-18T18:06:44.664Z",
                      "updatedAt": "2025-04-18T18:06:44.664Z",
                      "AdminId": 2,
                      "GameId": 1,
                      "LocationId": 3
                    }
                  ]
                }
  /rooms:
    post:
      summary: "create new room"
      security:
        - bearerAuth: []
      requestBody:
        content:
          application/json:
            schema:
              type: object
              required:
                - LocationId
                - GameId
              properties:
                LocationId:
                  type: integer
                GameId:
                  type: integer
      responses:
        "201":
          description: "room was created"
          content:
            application/json:
              example:
                {
                  "success": true,
                  "data": {
                    "gameTime": 0,
                    "isActivate": true,
                    "id": 3,
                    "AdminId": 1,
                    "LocationId": 1,
                    "GameId": 1,
                    "code": 3468,
                    "updatedAt": "2025-04-16T21:40:44.795Z",
                    "createdAt": "2025-04-16T21:40:44.795Z"
                  }
                }
  /rooms/{roomId}:
    get:
      summary: "get info about room if you are admin"
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: roomId
          required: true
          schema:
            type: integer
      responses:
        "200":
          description: "Room info"
          content:
            application/json:
              example:
                {
                  "success": true,
                  "data": {
                    "id": 1,
                    "gameTime": 0,
                    "isActivate": true,
                    "code": 5894,
                    "createdAt": "2025-04-16T21:39:20.665Z",
                    "updatedAt": "2025-04-16T21:39:20.665Z",
                    "AdminId": 1,
                    "GameId": 1,
                    "LocationId": 2
                  }
                }
    patch:
      summary: "update room if you are admin"
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: roomId
          required: true
          schema:
            type: integer
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                gameId:
                  type: integer
                gameTime:
                  type: integer
      responses:
        "200":
          description: "Room info"
          content:
            application/json:
              example:
                {
                  "success": true,
                  "data": {
                    "id": 4,
                    "gameTime": 50,
                    "isActivate": true,
                    "code": 2104,
                    "createdAt": "2025-04-18T17:28:00.789Z",
                    "updatedAt": "2025-04-18T18:39:04.596Z",
                    "AdminId": 2,
                    "GameId": 1,
                    "LocationId": 2
                  }
                }
    delete:
      summary: "delete room if you are admin"
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: roomId
          required: true
          schema:
            type: integer
      responses:
        "200":
          description: "Room deleted"
  /rooms/{roomId}/open:
    patch:
      summary: "open room if you are admin"
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: roomId
          required: true
          schema:
            type: integer
      responses:
        "200":
          description: "Room was closed"
          content:
            application/json:
              example:
                {
                  "success": true,
                  "data": {
                    "id": 5,
                    "gameTime": 0,
                    "isActivate": true,
                    "code": 4846,
                    "createdAt": "2025-04-18T18:06:28.302Z",
                    "updatedAt": "2025-04-18T20:24:07.049Z",
                    "AdminId": 2,
                    "GameId": 1,
                    "LocationId": 2
                  }
                }

  /rooms/{roomId}/close:
    patch:
      summary: "close room if you are admin"
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: roomId
          required: true
          schema:
            type: integer
      responses:
        "200":
          description: "Room was opend"
          content:
            application/json:
              example:
                {
                  "success": true,
                  "data": {
                    "id": 5,
                    "gameTime": 0,
                    "isActivate": false,
                    "code": null,
                    "createdAt": "2025-04-18T18:06:28.302Z",
                    "updatedAt": "2025-04-18T20:23:13.842Z",
                    "AdminId": 2,
                    "GameId": 1,
                    "LocationId": 2
                  }
                }
  /rooms/code/{code}:
    get:
      summary: "checks if room is open"
      parameters:
        - in: path
          name: code
          required: true
          schema:
            type: integer
      responses:
        "200":
          description: "isRoomExist"
          content:
            application/json:
              example:
                {
                  "success": true,
                  "id": 2
                }
  /rooms/{roomId}/clients/{clientId}:
    post:
      summary: "worse endpoint ever (i konw) --- connect client with room if you has password of JWT (you are admin)"
      security: 
        - {}
        - bearerAuth: []
      parameters:
        - in: path
          name: roomId
          required: true
          schema: 
            type: integer
        - in: path
          name: clientId
          required: true
          schema: 
            type: integer
        - in: query
          name: password
          required: false
          schema: 
            type: string
      requestBody:
        content:
          multipart/form-data:
            schema:
              type: object
              required:
                - file
              properties:
                file:
                  type: string
                  format: binary
      responses:
        "200":
          description: "Client was added to room"
          content:
            application/json:
              example:
                {
                  "success": true
                }
    delete:
      summary: "remove client from room"
      security: 
        - bearerAuth: []
      parameters:
        - in: path
          name: roomId
          required: true
          schema: 
            type: integer
        - in: path
          name: clientId
          required: true
          schema: 
            type: integer
      responses:
        "200":
          description: "Client was removed from room"
          content:
            application/json:
              example:
                {
                  "success": true
                }
  /rooms/{roomId}/clients:
    get:
      summary: "returns list of clients in room if you are admin"
      security: 
        - bearerAuth: []
      parameters:
        - in: path
          name: roomId
          required: true
          schema:
            type: integer
      responses:
        "200":
          description: "list of clients in room"
          content:
            application/json:
              example:
                {
                  "success": true,
                  "data": [
                    {
                      "id": 19,
                      "firstName": "Valentyn",
                      "lastName": "Hvozdenko",
                      "birthday": "2025-04-21T00:00:00.000Z",
                      "phone": "+4368120225819",
                      "mail": null,
                      "photo": "1745271118199-847610100.png",
                      "password": "GK8Yn33z",
                      "createdAt": "2025-04-21T21:31:58.249Z",
                      "updatedAt": "2025-04-21T21:31:58.249Z",
                      "RoomsClients": {
                        "clientSignature": null,
                        "ClientId": 19,
                        "RoomId": 2
                      }
                    }
                  ]
                }
  /clients:
    post:
      summary: "create new client (if you are admin of has code for room)"
      security: 
        - {}
        - bearerAuth: []
      parameters:
        - in: query
          name: code
          schema:
            type: integer
      requestBody:
        content:
          multipart/form-data:
            schema:
              type: object
              required:
                - data
              properties:
                file:
                  type: string
                  format: binary
                data: 
                  type: object
                  required:
                    - firstName
                    - lastName
                    - birthday
                    - phone
                  properties:
                    firstName:
                      type: string
                    lastName:
                      type: string
                    birthday:
                      type: string
                      example: "2008-02-04T00:00:00.000Z"
                    phone:
                      type: string
                      example: "+4368120229999"
                    mail:
                      type: string
      responses:
        "201":
          description: "client was created"
          content:
            application/json:
              example:
                {
                  "success": true,
                  "data": {
                    "id": 4,
                    "firstName": "Noname",
                    "lastName": "Noname",
                    "birthday": "2000-02-03T23:00:00.000Z",
                    "phone": "+4368120229999",
                    "mail": "test@gmail.com",
                    "photo": "1745174288585-63539522.gif",
                    "updatedAt": "2025-04-20T18:38:08.601Z",
                    "createdAt": "2025-04-20T18:38:08.601Z"
                  }
                }
    get:
      summary: "get list of clients if you are admin"
      security: 
        - bearerAuth: []
      parameters:
        - in: query
          name: offset
          schema: 
            type: integer
        - in: query
          name: limit
          schema: 
            type: integer
        - in: query
          name: id
          schema: 
            type: integer
        - in: query
          name: phone
          schema: 
            type: string
        - in: query
          name: firstName
          schema: 
            type: string
        - in: query
          name: lastName
          schema: 
            type: string
      responses:
        "200":
          description: "client info"
          content:
            application/json:
              example:
                {
                  "success": true,
                  "data": [
                    {
                      "id": 6,
                      "firstName": "Valentyn",
                      "lastName": "Hvozdenko",
                      "birthday": "2008-02-04T00:00:00.000Z",
                      "phone": "+4368120220467",
                      "mail": "test@gmail.com",
                      "photo": "1745223315862-687579432.jpeg",
                      "password": "16Fz74FI",
                      "createdAt": "2025-04-21T08:15:15.869Z",
                      "updatedAt": "2025-04-21T08:15:15.869Z"
                    }
                  ]
                }

  /clients/{clientId}: 
    get:
      summary: "get info about client by clientId | JWT OR password is required"
      security: 
        - {}
        - bearerAuth: []
      parameters:
        - in: path
          name: clientId
          required: true
          schema:
            type: integer
        - in: query
          name: password
          required: false
          schema:
            type: string

      responses:
        "200":
          description: "client info"
          content:
            application/json:
              example:
                {
                  "success": true,
                  "data": {
                    "id": 4,
                    "firstName": "Noname",
                    "lastName": "Noname",
                    "birthday": "2000-02-03T23:00:00.000Z",
                    "phone": "+4368120229999",
                    "mail": "test@gmail.com",
                    "photo": "1745174288585-63539522.gif",
                    "updatedAt": "2025-04-20T18:38:08.601Z",
                    "createdAt": "2025-04-20T18:38:08.601Z"
                  }
                }
    patch:
      summary: "to update client you need to be admin"
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: clientId
          required: true
          schema:
            type: integer
      requestBody:
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                file:
                  type: string
                  format: binary
                data: 
                  type: object
                  properties:
                    firstName:
                      type: string
                    lastName:
                      type: string
                    birthday:
                      type: string
                      example: "2008-02-04T00:00:00.000Z"
                    phone:
                      type: string
                      example: "+4368120229999"
                    mail:
                      type: string
      responses:
        "200":
          description: "client was updated"
          content:
            application/json:
              example:
                {
                  "success": true,
                  "data": {
                    "id": 4,
                    "firstName": "Noname",
                    "lastName": "Noname",
                    "birthday": "2000-02-03T23:00:00.000Z",
                    "phone": "+4368120229999",
                    "mail": "test@gmail.com",
                    "photo": "1745174288585-63539522.gif",
                    "updatedAt": "2025-04-20T18:38:08.601Z",
                    "createdAt": "2025-04-20T18:38:08.601Z"
                  }
                }
    delete:
      summary: "to delete client you need to be admin"
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: clientId
          required: true
          schema:
            type: integer
      responses:
        "200":
          description: "client was deleted"
  /clients/{clientId}/rooms:
    get:
      summary: "get list of clients rooms (if you has password or JWT)"
      security: 
        - {}
        - bearerAuth: []
      parameters:
        - in: path
          name: clientId
          required: true
          schema:
            type: integer
        - in: query
          name: password
          required: false
          schema:
            type: string
      responses:
        "200":
          description: "list of clients rooms"
          content:
            application/json:
              example:
                {
                  "success": true,
                  "data": [
                    {
                      "id": 2,
                      "gameTime": 0,
                      "isActivate": true,
                      "code": 6765,
                      "createdAt": "2025-04-21T14:13:27.747Z",
                      "updatedAt": "2025-04-21T14:13:27.747Z",
                      "AdminId": 1,
                      "GameId": 2,
                      "LocationId": 1,
                      "RoomsClients": {
                        "clientSignature": "1745523125867-283085174.pdf",
                        "ClientId": 22,
                        "RoomId": 2
                      }
                    }
                  ]
                }

components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT # Removed the semicolon and added a proper comment
