openapi: 3.0.0

info:
  title: Admin
  description: |
    **In each response you will get json like this: {"success": false, "message?":"error text", }**

  version: 0.0.0

servers:
  - url: http://localhost:8000/api
    description: Dev local serverk

paths:
  /admin:
    get:
      summary:
        "to get info by JWT"
      security:
        - bearerAuth: []
      responses:
        "200":
          description:
            "info about admin"
          content:
            application/json:
              schema:
                type:
                  object
                properties:
                  success:
                    type: boolean
                  data:
                    type: object
                    properties:
                      firstName:
                        type: string
                      lastName:
                        type: string
                      username:
                        type: string
                      isSuperAdmin:
                        type: boolean
  /admin/list:
    get:
      summary:
        "to get list of admins if you superadmin"
      security:
        - bearerAuth: []
      responses:
        "200":
          description:
            "list of admins"
          content:
            application/json:
              schema:
                type:
                  object
                properties:
                  success:
                    type: boolean
                  data:
                    type: array
                    items:
                      type: object
                      properties:
                        id: 
                          type: integer
                        firstName:
                          type: string
                        lastName:
                          type: string
                        username:
                          type: string
                        isSuperAdmin:
                          type: boolean
  /admin/register:
    post: 
      summary:
        "to create an admin you need to be superAdmin"
      security:
        - bearerAuth: []
      requestBody: 
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - firstName
                - lastName
                - username
                - password
              properties: 
                firstName:
                  type: string
                  minLength: 3
                  maxLength: 64
                lastName:
                  type: string
                  minLength: 3
                  maxLength: 64
                username:
                  type: string
                  minLength: 3
                  maxLength: 64
                password:
                  type: string
                  minLength: 3
                  maxLength: 64
      responses: 
        "201":
          description: "new admin created"
          content:
            application/json:
              example:
                {
                  "success": true,
                  "data": {
                    "id": 3,
                    "firstName": "string",
                    "lastName": "string",
                    "username": "string",
                    "isSuperAdmin": false
                  }
                }
  /admin/login:
    post:
      requestBody: 
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - username
                - password
              properties: 
                username:
                  type: string
                  minLength: 3
                  maxLength: 64
                password:
                  type: string
                  minLength: 3
                  maxLength: 64
      responses: 
        "200":
          description: "JWT"
          content:
            application/json:
              schema:
                type: object
                properties:
                  token: 
                    type: string
  /admin/{adminId}:
    get:
      summary:
        "to get info by adminId if you are superadmin"
      parameters:
        - in: path
          name: adminId
          required: true
          schema:
            type: integer
      security:
        - bearerAuth: []
      responses:
        "200":
          description:
            "info about admin"
          content:
            application/json:
              schema:
                type:
                  object
                properties:
                  success:
                    type: boolean
                  data:
                    type: object
                    properties:
                      firstName:
                        type: string
                      lastName:
                        type: string
                      username:
                        type: string
                      isSuperAdmin:
                        type: boolean
    delete:
      summary:
        "to delete admin if you are superadmin"
      parameters:
        - in: path
          name: adminId
          required: true
          schema:
            type: integer
      security:
        - bearerAuth: []
      responses:
        "200":
          description:
            "admin was deleted"

    put:
      summary:
        "to update an admin you need to be superAdmin"
      parameters:
        - in: path
          name: adminId
          required: true
          schema:
            type: integer
      security:
        - bearerAuth: []
      requestBody: 
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - username
              properties: 
                firstName:
                  type: string
                  minLength: 3
                  maxLength: 64
                lastName:
                  type: string
                  minLength: 3
                  maxLength: 64
                username:
                  type: string
                  minLength: 3
                  maxLength: 64
                password:
                  type: string
                  minLength: 3
                  maxLength: 64
      responses: 
        "200":
          description: "admin updated"
          content:
            application/json:
              example:
                {
                  "success": true,
                  "data": {
                    "id": 2,
                    "firstName": "lol",
                    "lastName": "kek",
                    "username": "cheburek",
                    "isSuperAdmin": false
                  }
                }
  /admin/location:
    get:
      summary:
        "get list of my locations"
      security:
        - bearerAuth: []
      responses:
        "200":
          description:
            "list of locaiton"
          content:
            application/json:
              example:
                {
                  "success": true,
                  "data": [
                    {
                      "id": 1,
                      "address": "string",
                      "city": "string",
                      "postcode": "string",
                      "phone": "string",
                      "mail": "string",
                      "createdAt": "2025-04-16T08:14:07.202Z",
                      "updatedAt": "2025-04-16T08:14:07.202Z",
                      "AdminsLocations": {
                        "AdminId": 1,
                        "LocationId": 1
                      }
                    }
                  ]
                }
  /admin/{adminId}/location:
    get:
      summary:
        "to get list of locations you need to be superadminadmin"
      parameters:
        - in: path
          name: adminId
          required: true
          schema:
            type: integer
      security:
        - bearerAuth: []
      responses:
        "200":
          description:
            "list of locations"
          content:
            application/json:
              example:
                {
                  "success": true,
                  "data": [
                    {
                      "id": 1,
                      "address": "egalstrase",
                      "city": "wien",
                      "postcode": "1000",
                      "phone": "+99999999",
                      "mail": "wien@gmail.com",
                      "createdAt": "2025-04-13T17:44:13.833Z",
                      "updatedAt": "2025-04-13T17:44:13.833Z",
                      "AdminsLocations": {
                        "AdminId": 1,
                        "LocationId": 1
                      }
                    }
                  ]
                }
  /admin/{adminId}/location/{locationId}:
    post:
      summary:
          "to connect admin with location you need to be superAdmin"
      parameters:
        - in: path
          name: adminId          
          required: true
          schema:
            type: integer
        - in: path
          name: locationId          
          required: true
          schema:
            type: integer
      security:
        - bearerAuth: []
      responses:
        "200":
          description:
            "connection was successful"
    delete:
      summary:
          "to delete connection between admin with location you need to be superAdmin"
      parameters:
        - in: path
          name: adminId          
          required: true
          schema:
            type: integer
        - in: path
          name: locationId          
          required: true
          schema:
            type: integer
      security:
        - bearerAuth: []
      responses:
        "200":
          description: 
            "association was deleted"
  /location:
    post:
      summary:
        "to create location you need to be superadmin" 
      security:
        - bearerAuth: []       
      requestBody:
        content:
          application/json:
            schema:
              type: object
              required:
                - address
                - city
                - postcode
                - phone
                - mail
              properties:
                address:
                  type: string
                city:
                  type: string
                postcode:
                  type: string
                phone:
                  type: string
                mail:
                  type:
                    string
      responses:
        "201":
          description:
            "location was created" 
          content:
            application/json:
              example:
                {
                  "success": true,
                  "data": {
                    "id": 3,
                    "address": "string",
                    "city": "string",
                    "postcode": "string",
                    "phone": "string",
                    "mail": "string",
                    "updatedAt": "2025-04-16T10:22:14.845Z",
                    "createdAt": "2025-04-16T10:22:14.845Z"
                  }
                }
  /location/list:
    get:
      summary:
        "list of locations"
      responses:
        "200":
          description:
            "list of locations"
          content:
            application/json:
              schema:
                type:
                  object
                properties:
                  success:
                    type: boolean
                  data:
                    type: array
                    items:
                      type: object
                      properties:
                        id:
                          type: integer
                        address:
                          type: string
                        city:
                          type: string
                        postcode:
                          type: string
                        phone:
                          type: string
                        mail:
                          type: string
                        createdAd:
                          type: string  
  /location/{locationId}:
    get:
      summary:
        "info by locationId"
      parameters:
        - in: path
          name: locationId
          required: true
          schema:
            type: integer
      security:
        - bearerAuth: []
      responses:
        "200":
          description:
            "info about location"
          content:
            application/json:
              schema:
                type:
                  object
                properties:
                  success:
                    type: boolean
                  data:
                    type: object
                    properties:
                        id:
                          type: integer
                        address:
                          type: string
                        city:
                          type: string
                        postcode:
                          type: string
                        phone:
                          type: string
                        mail:
                          type: string
                        createdAd:
                          type: string
    put:
      summary:
        "to update location you need to be superadmin"
      parameters:
        - in: path
          name: locationId
          required: true
          schema:
            type: integer
      security:
        - bearerAuth: []
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                address:
                  type: string
                city:
                  type: string
                postcode:
                  type: string
                phone:
                  type: string
                mail:
                  type: string
      responses: 
        "200": 
          description: "location was updated"
          content:
            application/json:
              example:
                {
                  "success": true,
                  "data": {
                    "id": 2,
                    "address": "lol",
                    "city": "lol",
                    "postcode": "lol",
                    "phone": "lol",
                    "mail": "lol",
                    "createdAt": "2025-04-16T10:21:36.321Z",
                    "updatedAt": "2025-04-16T10:28:13.311Z"
                  }
                }
    delete:
      summary:
        "to delete location you need to be superadmin"
      parameters:
        - in: path
          name: locationId
          required: true
          schema:
            type: integer
      security:
        - bearerAuth: []
      responses:
        "200":
          description:
            "location was deleted"
  /location/{locationId}/game:
    post:
      summary:
        "create game on location if you are admin"
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: locationId
          required: true
          schema:
            type: integer
      requestBody:
        content:
          multipart/form-data:
            schema:
              type: object
              required:
                - data
                - file
              properties:
                file:
                  type: string
                  format: binary
                data:
                  type: object
                  required:
                    - name
                    - icon
                    - color
                    - maxPlayers
                  properties:
                    name:
                      type: string
                    color: 
                      type: string
                    maxPlayers:
                      type: integer
      responses:
        "200":
          description: "game was created"
          content:
            application/json:
              example:
                {
                  "success": true,
                  "data": {
                    "id": 2,
                    "name": "string",
                    "color": "string",
                    "maxPlayers": 0,
                    "icon": "1744799370427-383776702.png",
                    "LocationId": 2
                  }
                }
    get:
      summary:
        "get all games on location"
      parameters:
        - in: path
          name: locationId
          required: true
          schema:
            type: integer
      responses:
        "200":
          description:
            "list of games"
          content:
            application/json:
              example:
                {
                  "success": true,
                  "data": [
                    {
                      "id": 1,
                      "name": "string",
                      "icon": "1744748725285-837733886.gif",
                      "color": "string",
                      "maxPlayers": 0,
                      "LocationId": 1
                    }
                  ]
                }
  /location/{locationId}/game/{gameId}:
    get:
      summary:
        "get game on location"
      parameters:
        - in: path
          name: locationId
          required: true
          schema:
            type: integer
        - in: path
          name: gameId
          required: true
          schema:
            type: integer
      responses:
        "200":
          description:
            "game info"
          content:
            application/json:
              example:
                {
                  "success": true,
                  "data": {
                    "id": 1,
                    "name": "string",
                    "icon": "1744748725285-837733886.gif",
                    "color": "string",
                    "maxPlayers": 0,
                    "LocationId": 1
                  }
                }
    delete:
      summary:
        "delete game on location"
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: locationId
          required: true
          schema:
            type: integer
        - in: path
          name: gameId
          required: true
          schema:
            type: integer
      responses:
        "200":
          description:
            "game was deleted"
          content:
            application/json:
              example:
                {
                  "success": true,
                }
    put:
      summary:
        "update game on location"
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: locationId
          required: true
          schema:
            type: integer
        - in: path
          name: gameId
          required: true
          schema:
            type: integer
      requestBody:
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                file:
                  type: string
                  format: binary
                data:
                  type: object
                  properties:
                    name:
                      type: string
                    color: 
                      type: string
                    maxPlayers:
                      type: integer
      responses:
        "200":
          description: 
            "game was updated"
          content:
            application/json:
              example:
                {
                  "success": true,
                  "data": {
                    "id": 2,
                    "name": "no name",
                    "icon": "1744789749739-759170685.gif",
                    "color": "no color",
                    "maxPlayers": 0,
                    "LocationId": 1
                  }
                }




  
      
components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT # Removed the semicolon and added a proper comment
